#include<bits/stdc++.h>
using namespace std;


class city
{
public:

    int num;
    vector<float> dist;
    city()
    {

    }
    city(int g_num ,vector<float> g_dist)
    {
        num = g_num;
        dist = g_dist; // distance vector of city from other city
    }
};


class car
{
public:

    city scr;
    city dest;
    float init_charge;
    float discrg_rate;
    float max_cap;
    float crg_rate;
    float avg_speed;

    //if found
    float total_time;
    vector<int> path;
    car()
    {

    }
    car(city source ,city destination,float bat_int,float discharge_rate,float maxi_cap,float charge_rate,float avrage_speed)
    {
        scr = source;
        dest = destination;
        init_charge = bat_int;
        discrg_rate = discharge_rate;
        max_cap = maxi_cap;
        crg_rate = charge_rate;
        avg_speed = avrage_speed;
        total_time = float(INT_MAX);
        path = {};
    }
};

class node
{
public:
    city cty;
    int pred;
    float h_cost;
    float t_cost;
    float f_cost;

    node()
    {

    }
    node(city c)
    {
        cty = c;
    }
};

car path_plot(car car_s,vector<city> city_list)
{
    vector<node> node_list;
    for(auto i:city_list)
    {
        node x = node(i);
        node_list.push_back(x);
    }
    //supply heuristic value

    queue<int> op;
    op.push(car_s.dest.num);
    node_list[car_s.dest.num].h_cost = 0;
    while(!op.empty())
    {
        int i=op.front();
        op.pop();
        for(int j=0;j<city_list.size();j++)
        {
            if(city_list[i].dist[j] !=-1)
            {
                if(node_list[j].h_cost != -1)
                {
                    node_list[j].h_cost = city_list[i].dist[j] + node_list[i].h_cost;
                    op.push(j);
                }
                else if(node_list[j].h_cost > (city_list[i].dist[j] + node_list[i].h_cost))
                {
                    node_list[j].h_cost = city_list[i].dist[j] + node_list[i].h_cost;
                    op.push(j);
                }
            }
        }
    }
    //heuristic calculations done


    //A* algorithm search
    queue<int> opent;
    vector<int> vis(city_list.size(),0);

    opent.push(car_s.scr.num);
    node_list[car_s.scr.num].t_cost = 0;
    node_list[car_s.scr.num].f_cost = node_list[car_s.scr.num].h_cost;
    vis[car_s.scr.num] = 1;

    while(!opent.empty())
    {
        int i=opent.front();
        opent.pop();

        if(i == car_s.dest.num) break;

        for(int j=0;j<city_list[i].dist.size();j++)
        {
            if(city_list[i].dist[j] !=-1 && city_list[i].dist[j] != 0 && city_list[i].dist[j] <= ((car_s.max_cap * car_s.avg_speed)/car_s.discrg_rate))
            {
                int cost = (city_list[i].dist[j]/car_s.avg_speed)*(1 + (car_s.discrg_rate/car_s.crg_rate));
                int g = cost + (node_list[j].h_cost/car_s.avg_speed);

                if(vis[j]==0)
                {
                    node_list[j].t_cost = cost + node_list[i].t_cost;
                    node_list[j].f_cost = node_list[i].t_cost + g;
                    node_list[j].pred = i;
                    opent.push(j);
                    vis[j]=1;
                }
                else if(vis[j]==1)
                {
                    if(node_list[j].t_cost > cost + node_list[i].t_cost)
                    {
                        node_list[j].t_cost = cost + node_list[i].t_cost;
                        node_list[j].f_cost = node_list[i].t_cost + g;
                        node_list[j].pred = i;
                    }
                }
            }
        }
    }
    //A* search completed... optimal path found

    //path finding
    vector<int> path;
    int i = car_s.dest.num;
    while(i == car_s.scr.num)
    {
        path.push_back(i);
        i = node_list[i].pred;
    }
    path.push_back(i);
    reverse(path.begin(),path.end());
    car_s.path = path;
    //path found

    //travel and charging time calculations
    int travel_time = 0;
    int crg_time = 0;

    for(int i=0;i<path.size();i++)
    {
        int di = city_list[path[i]].dist[path[i+1]];
        int cost_crg = (di/car_s.avg_speed)*car_s.discrg_rate;
        crg_time += cost_crg/car_s.crg_rate;
        travel_time += (di/car_s.avg_speed);
    
    }
    if(crg_time*car_s.crg_rate < car_s.init_charge)
        crg_time = 0;

    else
        crg_time = crg_time - (car_s.init_charge/car_s.crg_rate);
    
    car_s.total_time = travel_time + crg_time;

    return car_s;

}

//no_    

int main()
{
    cout<<"Enter the number of cars :"<<endl;
    int n;
    cin>>n;

    cout<<"Enter the number of cities :"<<endl;
    int m;
    cin>>m;

    vector<city> city_list;
    vector<car> car_list;
    
    vector<vector<float>> dist_matrix(m,vector<float>(m,-1.0));

    for(int i=0;i<m;i++)
    {
        dist_matrix[i][i]=0;
    }

    cout<<"enter the number of edges"<<endl;
    int e;
    cin>>e;
    cout<<"now give the graph in format of start_city end_city edge_weight respectively "<<endl;

    for(int i=0;i<e;i++)
    {
        int x,y;
        float w;
        cin>>x>>y>>w;
        dist_matrix[x-1][y-1]=w;
        dist_matrix[y-1][x-1]=w;
    }

    for(int i=0;i<m;i++)
    {
        city a=city(i,dist_matrix[i]);
        city_list.push_back(a);
    }

    for(int i=0;i<n;i++)
    {
        cout<<"Enter the source city of car number "<<i+1<<endl;
        int sr;cin>>sr;sr--;

        cout<<"Enter the destination city of car number "<<i+1<<endl;
        int de;cin>>de;de--;

        cout<<"Enter the initial charge of car number "<<i+1<<endl;
        float b;cin>>b;

        cout<<"Enter the discharge rate of car number "<<i+1<<endl;
        float dis;cin>>dis;

        cout<<"Enter the maximum charge capacity of car number "<<i+1<<endl;
        float cap;cin>>cap;

        cout<<"Enter the charge rate of car number "<<i+1<<endl;
        float cr;cin>>cr;

        cout<<"Enter the average speed of car number "<<i+1<<endl;
        float avs;cin>>avs;

        car c=car(city_list[sr],city_list[de],b,dis,cap,cr,avs);
        car_list.push_back(c);
    }

    for(int i=0;i<car_list.size();i++)
    {
        car_list[i] = path_plot(car_list[i],city_list);
    }

    cout<<"The following are the path of each car"<<endl;

    for(int i=0;i<car_list.size();i++)
    {
        cout<<i+1<<" :";
        for(int j:car_list[i].path)
        {
            cout<<j+1<<" ";
        }
    }

}
